/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class NestedIterator implements Iterator<Integer> {
    private List<NestedInteger> nestedList;
    private NestedIterator iterator = null;
    private int i = 0;

    public NestedIterator(List<NestedInteger> nestedList) {
        this.nestedList = nestedList;
    }

    @Override
    public Integer next() {
        NestedInteger cur = nestedList.get(i);
        if(cur.isInteger()){
            i++;
            return cur.getInteger();
        }else{
            return iterator.next();
        }
        
    }

    @Override
    public boolean hasNext() {
        while(i<nestedList.size()){
            NestedInteger cur = nestedList.get(i);
            if(cur.isInteger()){
                return true;
            }
            if(iterator == null){
                iterator = new NestedIterator(cur.getList());
            }
            if(iterator.hasNext()){
                return true;
            }
            iterator = null;
            i++;
        }

        return false;
    }
}

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i = new NestedIterator(nestedList);
 * while (i.hasNext()) v[f()] = i.next();
 */
